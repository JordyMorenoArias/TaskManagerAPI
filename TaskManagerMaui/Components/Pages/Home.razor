@page "/"
@using TaskManagerMaui.Constants

<h3 class="mt-4 mb-3 text-primary">Gestor de Tareas</h3>

<div class="container">
	<div class="row">
		@if (tasks is not null && tasks.Any())
		{
			@foreach (var task in tasks)
			{
				<div class="col-md-6 col-lg-4 mb-3 d-flex">
					<div class="card card-personalized shadow-sm w-100">
						<div class="card-body">
							<h5 class="card-title">@task.Title</h5>
							<p class="card-text">@task.Description</p>
									<div  @onclick="() => IncreasePriority(task.Id)" style="user-select: none;">
								<span class="badge @(GetPriorityClass(task.Priority))">
									@task.Priority
								</span>
							</div>
							<p class="text-muted">📅 Vence el: @task.DueDate.ToShortDateString()</p>
							<p>
								@if (task.IsCompleted)
								{
									<span class="badge bg-success">✔️ Completada</span>
								}
								else
								{
									<span class="badge bg-warning text-dark">⏳ Pendiente</span>
								}
							</p>
						</div>
						<div class="card-footer">
							<button class="btn btn-sm btn-primary w-100" @onclick="() => MarkAsCompleted(task.Id)">
								Completar
							</button>
						</div>
					</div>
				</div>
			}
		}
		else
		{
			<div class="col-12">
				<p class="text-center text-muted">No hay tareas disponibles.</p>
			</div>
		}
	</div>
</div>


@code {
	private IEnumerable<Models.Task>? tasks;
	private bool isShaking = false;

	protected override void OnInitialized()
	{
		tasks = new List<Models.Task>
		{
			new Models.Task
			{
				Id = 1,
				Title = "Actualizar documentación",
				Description = "Revisar y actualizar la documentación del proyecto.",
				Priority = Priority.High,
				DueDate = DateTime.Now.AddDays(2),
				IsCompleted = false
			},
			new Models.Task
			{
				Id = 2,
				Title = "Implementar autenticación",
				Description = "Agregar autenticación con JWT a la API.",
				Priority = Priority.High,
				DueDate = DateTime.Now.AddDays(5),
				IsCompleted = false
			},
			new Models.Task
			{
				Id = 3,
				Title = "Optimizar consultas SQL",
				Description = "Revisar y optimizar las consultas más pesadas en la base de datos.",
				Priority = Priority.Medium,
				DueDate = DateTime.Now.AddDays(7),
				IsCompleted = false
			},
			new Models.Task
			{
				Id = 4,
				Title = "Diseñar UI para panel de administración",
				Description = "Crear el diseño inicial del panel de administración en .NET MAUI.",
				Priority = Priority.Low,
				DueDate = DateTime.Now.AddDays(10),
				IsCompleted = false
			}
		};

		// Iniciar la detección de sacudidas
		if (Accelerometer.Default.IsSupported)
		{
			Accelerometer.Default.ReadingChanged += OnShakeDetected;
			Accelerometer.Default.Start(SensorSpeed.UI);
		}
	}

	private void OnShakeDetected(object sender, AccelerometerChangedEventArgs e)
	{
		var acceleration = e.Reading;
		var shakeThreshold = 2.0; // Ajusta según la sensibilidad deseada

		if (Math.Abs(acceleration.Acceleration.X) > shakeThreshold ||
			Math.Abs(acceleration.Acceleration.Y) > shakeThreshold ||
			Math.Abs(acceleration.Acceleration.Z) > shakeThreshold)
		{
			if (!isShaking)
			{
				isShaking = true;
				MarkFirstTaskAsCompleted();
				InvokeAsync(StateHasChanged);
				Task.Delay(1000).ContinueWith(_ => isShaking = false);
			}
		}
	}

	private void MarkFirstTaskAsCompleted()
    {
        var firstTask = tasks?.FirstOrDefault();
        if (firstTask != null && !firstTask.IsCompleted)
        {
            firstTask.IsCompleted = true;
        }
    }

	private void MarkAsCompleted(int id)
	{
		var task = tasks!.FirstOrDefault(t => t.Id == id);
		if (task != null)
		{
			task.IsCompleted = true;
		}
	}

	private string GetPriorityClass(Priority priority)
	{
		return priority switch
		{
			Priority.High => "bg-danger",
			Priority.Medium => "bg-warning",
			Priority.Low => "bg-info",
			_ => "bg-secondary"
		};
	}

	private void IncreasePriority(int id)
	{
		var task = tasks!.FirstOrDefault(t => t.Id == id);
		if (task != null)
		{
			task.Priority = task.Priority switch
			{
				Priority.Low => Priority.Medium,
				Priority.Medium => Priority.High,
				_ => Priority.Low
			};
		}
	}
}